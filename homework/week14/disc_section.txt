Polling

Definition
	Forces the hardware to wait on ready bit (alternatively, if timing
	of device is known – the ready bit can be polled at the frequency of the
	device). It basically means manually checking the ready bit regularly.

Pro
	­easy to write
	poll handler does not have excessively high overhead
	deterministic
	doesn’t require additional hardware
	Good for Mouse, keyboard

Con
	Infeasible on hardware with fast transfer rates that is actually rarely
	ready (e.g. Ethernet card receiver)


Interrupts

Definition
	Hardware fires an “exception” when it becomes ready. CPU
	changes $PC to execute code in the interrupt handler when this occurs.

Pro
	Necessary for fast devices that are rarely ready
	Good for: Fast devices, Hard drives, Network cards

Con
	nondeterministic when interrupt occurs
	interrupt handler has some overhead (saves all registers), meaning polling can
	actually be faster for slow, often ready devices such as mice


Memory Mapped I/O

lui $t0 0xffff
receive_wait: #poll on ready of receiver
lw $t1 0($t0)
andi $t1 $t1 1
beq $t1 $zero receive_wait
lb $t2 4$t0) #load data

transmit_wait: #poll on ready of transmitter
lw $t1 8($t0)
andi $t1 $t1 1
beq $t1 $zero transmit_wait
#write to transmitter
sb $t2 12($t0)


Hamming ECC

1) 	Parity Bits: 3
2) 	Using P for parity bits: PP0P011
3) 	Parity bit #1: 1, 3, 5, 7
	Parity bit #2: 2, 3, 6, 7
	Parity bit #3: 4, 5, 6, 7
4)	1000011
5) Add an additional parity bit over the entire sequence
6)	Parity group 1: error
	Parity group 2: okay
	Parity group 4: error
	Incorrect bit: 1 + 4 = 5, change bit 5 from 1 to 0: 0110011
	0110011 → 1011
7)	Parity group 1: error
	Parity group 2: okay
	Parity group 4: error
	Incorrect bit: 1 + 4 = 5, change bit 5 from 1 to 0: 1001100
	1001100 → 0100
8)
	Parity group 1: okay
	Parity group 2: error
	Parity group 4: okay
	Parity group 8: error
	Incorrect bit: 2 + 8 = 10, change bit 10 from 0 to 1: 010011010100110
	010011010100110 → 01100100110



RAID 0

Configuration
	Data disks without check information
Pro
	No overhead, Fast read / write
Con
	Reliability

RAID 1

Configuration
	Mirrored Disks: Extra copy of disks
Pro
	Fast read / write, Fast recovery
Con
	High overhead -> Expensive

RAID 2

Configuration
	Hamming ECC: One check disk per parity group
Pro
	Smaller overhead
Con
	Redundant check disks

RAID 3

Configuration
	Single check disk for error correction (Disk controllers can detect failures)
	Transfer units are spread over all disks in a group (bit interleaving)
Pro
	Smallest check information overhead
Con
	Read all data disks for small accesses to detect errors

RAID 4

Configuration
	Transfer units = a sector within a single disk
	Errors are detected within a single transfer unit Independent reads/writes per disks
Pro
	Higher throughput of small reads
Con
	Still slow small writes (A single check disk is a bottleneck)

RAID 5

Configuration
	Check information is distributed across all disks in a group.
Pro
	Higher throughput of small writes
